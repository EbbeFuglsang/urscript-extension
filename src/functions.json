[
  {
    "Name": "conveyor_pulse_decode",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "This function is replaced by `encoder_enable_pulse_decode` and it should therefore not be used moving forward.",
    "Comment": "Tells the robot controller to treat digital inputs number A and B as pulses for a conveyor encoder. Only digital input 0, 1, 2 or 3 can be used.",
    "Parameters": [
      {
        "Label": "type",
        "Type": "Int",
        "Comment": "An integer determining how to treat the inputs on A and B.\r\n`0` is no encoder, pulse decoding is disabled.\r\n`1` is quadrature encoder, input A and B must be square waves with 90 degree offset. Direction of the conveyor can be determined.\r\n`2` is rising and falling edge on single input (A).\r\n`3` is rising edge on single input (A).\r\n`4` is falling edge on single input (A).\r\nThe controller can decode inputs at up to 40kHz",
        "Default": ""
      },
      {
        "Label": "A",
        "Type": "Int",
        "Comment": "Encoder input A pin. Must be 0-3.",
        "Default": ""
      },
      {
        "Label": "B",
        "Type": "Int",
        "Comment": "Encoder input B pin. Must be 0-3.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "encoder_enable_pulse_decode",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets up an encoder hooked up to the pulse decoder of the controller.",
    "Parameters": [
      {
        "Label": "encoder_index",
        "Type": "Int",
        "Comment": "Index of the encoder to define. Must be either 0 or 1.",
        "Default": ""
      },
      {
        "Label": "decoder_type",
        "Type": "Int",
        "Comment": "An integer determining how to treat the inputs on A and B.\r\n`0` is no encoder, pulse decoding is disabled.\r\n`1` is quadrature encoder, input A and B must be square waves with 90 degree offset. Direction of the conveyor can be determined.\r\n`2` is rising and falling edge on single input (A).\r\n`3` is rising edge on single input (A).\r\n`4` is falling edge on single input (A).\r\nThe controller can decode inputs at up to 40kHz",
        "Default": ""
      },
      {
        "Label": "A",
        "Type": "Int",
        "Comment": "Encoder input A pin. Must be 0-3.",
        "Default": ""
      },
      {
        "Label": "B",
        "Type": "Int",
        "Comment": "Encoder input B pin. Must be 0-3.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "encoder_enable_set_tick_count",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets up an encoder expecting to be updated with tick counts via the\r\nfunction `encoder_set_tick_count`",
    "Parameters": [
      {
        "Label": "encoder_index",
        "Type": "Int",
        "Comment": "Index of the encoder to define. Must be either 0 or 1.",
        "Default": ""
      },
      {
        "Label": "range_id",
        "Type": "Int",
        "Comment": "decoder_index: Range of the encoder (integer). Needed to handle wrapping nicely.\r\n`0` is a 32 bit signed encoder, range [-2147483648 ; 2147483647]\r\n`1` is a 8 bit unsigned encoder, range [0 ; 255]\r\n`2` is a 16 bit unsigned encoder, range [0 ; 65535]\r\n`3` is a 24 bit unsigned encoder, range [0 ; 16777215]\r\n`4` is a 32 bit unsigned encoder, range [0 ; 4294967295]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "encoder_get_tick_count",
    "ReturnType": "Float",
    "Return": "The conveyor encoder tick count (float)",
    "Deprecated": "",
    "Comment": "Returns the tick count of the designated encoder.",
    "Parameters": [
      {
        "Label": "encoder_index",
        "Type": "Int",
        "Comment": "Index of the encoder to query. Must be either 0 or 1.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "encoder_set_tick_count",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Tells the robot controller the tick count of the encoder. This function is\r\nuseful for absolute encoders (e.g. MODBUS).",
    "Parameters": [
      {
        "Label": "encoder_index",
        "Type": "Int",
        "Comment": "Index of the encoder to define. Must be either 0 or 1.",
        "Default": ""
      },
      {
        "Label": "count",
        "Type": "Int",
        "Comment": "The tick count to set. Must be within the range of the encoder.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "end_force_mode",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Resets the robot mode from force mode to normal operation.\r\nThis is also done when a program stops.",
    "Parameters": []
  },
  {
    "Name": "end_freedrive_mode",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set robot back in normal position control mode after freedrive mode.",
    "Parameters": []
  },
  {
    "Name": "end_teach_mode",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set robot back in normal position control mode after freedrive mode.",
    "Parameters": []
  },
  {
    "Name": "force_mode",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set robot to be controlled in force mode",
    "Parameters": [
      {
        "Label": "task_frame",
        "Type": "Pose",
        "Comment": "A pose vector that defines the force frame relative to the base frame.",
        "Default": ""
      },
      {
        "Label": "selection_vector",
        "Type": "Float",
        "Comment": "A 6d vector of 0s and 1s. 1 means that the robot will be compliant in the corresponding axis of the task frame.",
        "Default": ""
      },
      {
        "Label": "wrench",
        "Type": "Number",
        "Comment": "The forces/torques the robot will apply to its environment. The robot adjusts its position along/about compliant axis in order to achieve the specified force/torque. Values have no effect for non-compliant axes.\r\n\r\nActual wrench applied may be lower than requested due to joint safety limits. Actual forces and torques can be read using `get_tcp_force` function in a separate thread.",
        "Default": ""
      },
      {
        "Label": "type",
        "Type": "Int",
        "Comment": "An integer [1;3] specifying how the robot interprets the force frame.\r\n`1` The force frame is transformed in a way such that its y-axis is aligned with a vector pointing from the robot tcp towards the origin of the force frame.\r\n`2` The force frame is not transformed.\r\n`3` The force frame is transformed in a way such that its x-axis is the projection of the robot tcp velocity vector onto the x-y plane of the force frame.",
        "Default": ""
      },
      {
        "Label": "limits",
        "Type": "Float",
        "Comment": "(Float) 6d vector. For compliant axes, these values are the maximum allowed tcp speed along/about the axis. For non-compliant axes, these values are the maximum allowed deviation along/about an axis between the actual tcp position and the one set by the program.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "force_mode_set_damping",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the damping parameter in force mode.",
    "Parameters": [
      {
        "Label": "damping",
        "Type": "Float",
        "Comment": "Between 0 and 1, default value is 0.\r\n\r\nA value of 1 is full damping, so the robot will decellerate quickly if no force is present. A value of 0 is no damping, here the robot will maintain the speed.\r\n\r\nThe value is stored until this function is called again. Add this to the beginning of your program to ensure it is called before force mode is entered (otherwise default value will be used).",
        "Default": ""
      }
    ]
  },
  {
    "Name": "freedrive_mode",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set robot in freedrive mode. In this mode the robot can be moved around by hand in the same way as by pressing the \"freedrive\" button. The robot will not be able to follow a trajectory (eg. a `movej`) in this mode.",
    "Parameters": []
  },
  {
    "Name": "get_conveyor_tick_count",
    "ReturnType": "Int",
    "Return": "The conveyor encoder tick count",
    "Deprecated": "This function is replaced by `encoder_get_tick_count` and it should therefore not be used moving forward.",
    "Comment": "Tells the tick count of the encoder, note that the controller interpolates tick counts to get more accurate movements with low resolution encoders",
    "Parameters": []
  },
  {
    "Name": "movec",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Move Circular: Move to position (circular in tool-space)\r\n\r\nTCP moves on the circular arc segment from current pose, through pose_via to pose_to. Accelerates to and moves with constant tool speed v. Use the mode parameter to define the orientation interpolation.",
    "Parameters": [
      {
        "Label": "pose_via",
        "Type": "Pose",
        "Comment": "path point (note: only position is used). Pose_via can also be specified as joint positions, then forward kinematics is used to calculate the corresponding pose.",
        "Default": ""
      },
      {
        "Label": "pose_to",
        "Type": "Pose",
        "Comment": "target pose (note: only position is used in Fixed orientation mode). Pose_to can also be specified as joint positions, then forward kinematics is used to calculate the corresponding pose.",
        "Default": ""
      },
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "tool acceleration [m/s^2]",
        "Default": "1.2"
      },
      {
        "Label": "v",
        "Type": "Number",
        "Comment": "tool speed [m/s]",
        "Default": "0.25"
      },
      {
        "Label": "r",
        "Type": "Number",
        "Comment": "blend radius (of target pose) [m]",
        "Default": "0"
      },
      {
        "Label": "mode",
        "Type": "Int",
        "Comment": "`0` Unconstrained mode. Interpolate orientation from current pose to target pose (pose_to)\r\n`1` Fixed mode. Keep orientation constant relative to the tangent of the circular arc (starting from current pose)",
        "Default": "0"
      }
    ]
  },
  {
    "Name": "movej",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Move to position (linear in joint-space)\r\n\r\nWhen using this command, the robot must be at a standstill or come from a movej or movel with a blend. The speed and acceleration parameters control the trapezoid speed profile of the move. Alternatively, the t parameter can be used to set the time for this move. Time setting has priority over speed and acceleration settings.",
    "Parameters": [
      {
        "Label": "q",
        "Type": "Array",
        "Comment": "joint positions (q can also be specified as a pose, then inverse kinematics is used to calculate the corresponding joint positions)",
        "Default": ""
      },
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "joint acceleration of leading axis [rad/s^2]",
        "Default": "1.4"
      },
      {
        "Label": "v",
        "Type": "Number",
        "Comment": "joint speed of leading axis [rad/s]",
        "Default": "1.05"
      },
      {
        "Label": "t",
        "Type": "Number",
        "Comment": "time [S]",
        "Default": "0"
      },
      {
        "Label": "r",
        "Type": "Number",
        "Comment": "blend radius [m]\r\n\r\nIf a blend radius is set, the robot arm trajectory will be modified to avoid the robot stopping at the point.\r\n\r\nHowever, if the blend region of this move overlaps with the blend radius of previous or following waypoints, this move will be skipped, and an **Overlapping Blends** warning message will be generated.",
        "Default": "0"
      }
    ]
  },
  {
    "Name": "movel",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Move to position (linear in tool-space)",
    "Parameters": [
      {
        "Label": "pose",
        "Type": "Pose",
        "Comment": "target pose (pose can also be specified as joint positions, then forward kinematics is used to calculate the corresponding pose)",
        "Default": ""
      },
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "tool acceleration [m/s^2]",
        "Default": "1.2"
      },
      {
        "Label": "v",
        "Type": "Number",
        "Comment": "tool speed [m/s]",
        "Default": "0.25"
      },
      {
        "Label": "t",
        "Type": "Number",
        "Comment": "time [S]",
        "Default": "0"
      },
      {
        "Label": "r",
        "Type": "Number",
        "Comment": "blend radius [m]",
        "Default": "0"
      }
    ]
  },
  {
    "Name": "movep",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Move Process\r\n\r\nBlend circular (in tool-space) and move linear (in tool-space) to position. Accelerates to and moves with constant tool speed v.",
    "Parameters": [
      {
        "Label": "pose",
        "Type": "Pose",
        "Comment": "target pose (pose can also be specified as joint positions, then forward kinematics is used to calculate the corresponding pose)",
        "Default": ""
      },
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "tool acceleration [m/s^2]",
        "Default": "1.2"
      },
      {
        "Label": "v",
        "Type": "Number",
        "Comment": "tool speed [m/s]",
        "Default": "0.25"
      },
      {
        "Label": "r",
        "Type": "Number",
        "Comment": "blend radius [m]",
        "Default": "0"
      }
    ]
  },
  {
    "Name": "position_deviation_warning",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "When enabled, this function generates warning messages to the log when the robot deviates from the target position. This function can be called at any point in the execution of a program. It has no return value.",
    "Parameters": [
      {
        "Label": "enabled",
        "Type": "Bool",
        "Comment": "(Boolean) Enable or disable position deviation log messages.",
        "Default": ""
      },
      {
        "Label": "threshold",
        "Type": "Float",
        "Comment": "(Float) Optional value in the range [0;1], where 0 is no position deviation and 1 is the maximum position deviation (equivalent to the amount of position deviation that causes a protective stop of the robot). If no threshold is specified by the user, a default value of 0.8 is used.",
        "Default": "0.8"
      }
    ]
  },
  {
    "Name": "reset_revolution_counter",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Reset the revolution counter, if no offset is specified. This is applied on joints which safety limits are set to \"Unlimited\" and are only applied when new safety settings are applied with limitted joint angles.",
    "Parameters": [
      {
        "Label": "qNear",
        "Type": "Array",
        "Comment": "Optional parameter, reset the revolution counter to one close to the given qNear joint vector. If not defined, the joint’s actual number of revolutions are used.",
        "Default": "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"
      }
    ]
  },
  {
    "Name": "servoc",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Servo Circular\r\nServo to position (circular in tool-space). Accelerates to and moves with constant tool speed v.",
    "Parameters": [
      {
        "Label": "pose",
        "Type": "Pose",
        "Comment": "target pose (pose can also be specified as joint positions, then forward kinematics is used to calculate the corresponding pose)",
        "Default": ""
      },
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "tool acceleration [m/s^2]",
        "Default": "1.2"
      },
      {
        "Label": "v",
        "Type": "Number",
        "Comment": "tool speed [m/s]",
        "Default": "0.25"
      },
      {
        "Label": "r",
        "Type": "Number",
        "Comment": "blend radius (of target pose) [m]",
        "Default": "0"
      }
    ]
  },
  {
    "Name": "servoj",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Servo to position (linear in joint-space)\r\n\r\nServo function used for online control of the robot. The lookahead time and the gain can be used to smoothen or sharpen the trajectory.\r\n\r\nNote: A high gain or a short lookahead time may cause instability. Prefered use is to call this function with a new setpoint (q) in each time step (thus the default t=0.008)",
    "Parameters": [
      {
        "Label": "q",
        "Type": "Array",
        "Comment": "joint positions [rad]",
        "Default": ""
      },
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "NOT used in current version",
        "Default": ""
      },
      {
        "Label": "v",
        "Type": "Number",
        "Comment": "NOT used in current version",
        "Default": ""
      },
      {
        "Label": "t",
        "Type": "Number",
        "Comment": "time where the command is controlling the robot. The function is blocking for time t [S]",
        "Default": "0.008"
      },
      {
        "Label": "lookahead_time",
        "Type": "Number",
        "Comment": "time [S], range [0.03,0.2] smoothens the trajectory with this lookahead time",
        "Default": "0.1"
      },
      {
        "Label": "gain",
        "Type": "Number",
        "Comment": "proportional gain for following target position, range [100,2000]",
        "Default": "300"
      }
    ]
  },
  {
    "Name": "set_conveyor_tick_count",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "This function is replaced by `encoder_set_tick_count` and it should therefore not be used moving forward.",
    "Comment": "Tells the robot controller the tick count of the encoder. This function is useful for absolute encoders, use `conveyor_pulse_decode()` for setting up an incremental encoder. For circular conveyors, the value must be between 0 and the number of ticks per revolution.",
    "Parameters": [
      {
        "Label": "tick_count",
        "Type": "Int",
        "Comment": "Tick count of the conveyor (Integer)",
        "Default": ""
      },
      {
        "Label": "absolute_encoder_resolution",
        "Type": "Int",
        "Comment": "Resolution of the encoder, needed to handle wrapping nicely. (Integer)\r\n`0` is a 32 bit signed encoder, range [-2147483648 ; 2147483647] (default)\r\n`1` is a 8 bit unsigned encoder, range [0 ; 255]\r\n`2` is a 16 bit unsigned encoder, range [0 ; 65535]\r\n`3` is a 24 bit unsigned encoder, range [0 ; 16777215]\r\n`4` is a 32 bit unsigned encoder, range [0 ; 4294967295]",
        "Default": "0"
      }
    ]
  },
  {
    "Name": "set_pos",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set joint positions of simulated robot",
    "Parameters": [
      {
        "Label": "q",
        "Type": "Array",
        "Comment": "joint positions",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_safety_mode_transition_hardness",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the transition hardness between normal mode, reduced mode and safeguard stop.",
    "Parameters": [
      {
        "Label": "type",
        "Type": "Int",
        "Comment": "An integer specifying transition hardness.\r\n`0` is hard transition between modes using maximum torque, similar to emergency stop.\r\n`1` is soft transition between modes.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "speedj",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Joint speed\r\n\r\nAccelerate linearly in joint space and continue with constant joint speed. The time t is optional; if provided the function will return after time t, regardless of the target speed has been reached. If the time t is not provided, the function will return when the target speed is reached.",
    "Parameters": [
      {
        "Label": "qd",
        "Type": "Array",
        "Comment": "joint speeds [rad/s]",
        "Default": ""
      },
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "joint acceleration [rad/s^2] (of leading axis)",
        "Default": ""
      },
      {
        "Label": "t",
        "Type": "Number",
        "Comment": "time [s] before the function returns (optional)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "speedl",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Tool speed\r\n\r\nAccelerate linearly in Cartesian space and continue with constant tool speed. The time t is optional; if provided the function will return after time t, regardless of the target speed has been reached. If the time t is not provided, the function will return when the target speed is reached.",
    "Parameters": [
      {
        "Label": "xd",
        "Type": "Array",
        "Comment": "tool speed [m/s] (spatial vector)",
        "Default": ""
      },
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "tool position acceleration [m/s^2]",
        "Default": ""
      },
      {
        "Label": "t",
        "Type": "Number",
        "Comment": "time [s] before function returns (optional)",
        "Default": ""
      },
      {
        "Label": "aRot",
        "Type": "Number",
        "Comment": "tool acceleration [rad/s^2] (optional), if not defined a, position acceleration, is used",
        "Default": "'a'"
      }
    ]
  },
  {
    "Name": "stop_conveyor_tracking",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Stop tracking the conveyor, started by track_conveyor_linear() or track_conveyor_circular(), and decelerate all joint speeds to zero.",
    "Parameters": [
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "joint acceleration [rad/s^2] (optional)",
        "Default": "20"
      }
    ]
  },
  {
    "Name": "stopj",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Stop (linear in joint space)\r\n\r\nDecelerate joint speeds to zero",
    "Parameters": [
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "joint acceleration [rad/s^2] (of leading axis)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "stopl",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Stop (linear in tool space)\r\n\r\nDecelerate tool speed to zero",
    "Parameters": [
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "tool accleration [m/s^2]",
        "Default": ""
      },
      {
        "Label": "aRot",
        "Type": "Number",
        "Comment": "tool acceleration [rad/s^2] (optional), if not defined a, position acceleration, is used",
        "Default": "'a'"
      }
    ]
  },
  {
    "Name": "teach_mode",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set robot in freedrive mode. In this mode the robot can be moved around by hand in the same way as by pressing the \"freedrive\" button. The robot will not be able to follow a trajectory (eg. a `movej`) in this mode.",
    "Parameters": []
  },
  {
    "Name": "track_conveyor_circular",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Makes robot movement (movej() etc.) track a circular conveyor.",
    "Parameters": [
      {
        "Label": "center",
        "Type": "Pose",
        "Comment": "Pose vector that determines center of the conveyor in the base coordinate system of the robot.",
        "Default": ""
      },
      {
        "Label": "ticks_per_revolution",
        "Type": "Number",
        "Comment": "How many ticks the encoder sees when the conveyor moves one revolution.",
        "Default": ""
      },
      {
        "Label": "rotate_tool",
        "Type": "Bool",
        "Comment": "Should the tool rotate with the coneyor or stay in the orientation specified by the trajectory (movel() etc.)",
        "Default": "False"
      },
      {
        "Label": "encoder_index",
        "Type": "Int",
        "Comment": "The index of the encoder to associate with the conveyor tracking. Must be either 0 or 1. This is an optional argument, and please note the default of 0. The ability to omit this argument will allow existing programs to keep working. Also, in use cases where there is just one conveyor to track consider leaving this argument out.",
        "Default": "0"
      }
    ]
  },
  {
    "Name": "track_conveyor_linear",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Makes robot movement (movej() etc.) track a linear conveyor.",
    "Parameters": [
      {
        "Label": "direction",
        "Type": "Pose",
        "Comment": "Pose vector that determines the direction of the conveyor in the base coordinate system of the robot",
        "Default": ""
      },
      {
        "Label": "ticks_per_meter",
        "Type": "Number",
        "Comment": "How many ticks the encoder sees when the conveyor moves one meter",
        "Default": ""
      },
      {
        "Label": "encoder_index",
        "Type": "Int",
        "Comment": "The index of the encoder to associate with the conveyor tracking. Must be either 0 or 1. This is an optional argument, and please note the default of 0. The ability to omit this argument will allow existing programs to keep working. Also, in use cases where there is just one conveyor to track consider leaving this argument out.",
        "Default": "0"
      }
    ]
  },
  {
    "Name": "force",
    "ReturnType": "Float",
    "Return": "The force in Newtons (float)",
    "Deprecated": "",
    "Comment": "Returns the force exerted at the TCP\r\n\r\nReturn the current externally exerted force at the TCP. The force is the norm of Fx, Fy, and Fz calculated using `get_tcp_force()`.",
    "Parameters": []
  },
  {
    "Name": "get_actual_joint_positions",
    "ReturnType": "Array",
    "Return": "The current actual joint angular position vector in rad : [Base, Shoulder, Elbow, Wrist1, Wrist2, Wrist3]",
    "Deprecated": "",
    "Comment": "Returns the actual angular positions of all joints\r\n\r\nThe angular actual positions are expressed in radians and returned as a vector of length 6. Note that the output might differ from the output of `get_target_joint_positions()`, especially during acceleration and heavy loads",
    "Parameters": []
  },
  {
    "Name": "get_actual_joint_speeds",
    "ReturnType": "Array",
    "Return": "The current actual joint angular velocity vector in rad/s: [Base, Shoulder, Elbow, Wrist1, Wrist2, Wrist3]",
    "Deprecated": "",
    "Comment": "Returns the actual angular velocities of all joints\r\n\r\nThe angular actual velocities are expressed in radians pr. second and returned as a vector of length 6. Note that the output might differ from the output of `get_target_joint_speeds()`, especially during acceleration and heavy loads",
    "Parameters": []
  },
  {
    "Name": "get_actual_tcp_pose",
    "ReturnType": "Array",
    "Return": "The current actual TCP vector [X, Y, Z, Rx, Ry, Rz]",
    "Deprecated": "",
    "Comment": "Returns the current measured tool pose\r\n\r\nReturns the 6d pose representing the tool position and orientation specified in the base frame. The calculation of this pose is based on the actual robot encoder readings.",
    "Parameters": []
  },
  {
    "Name": "get_actual_tcp_speed",
    "ReturnType": "Array",
    "Return": "The current actual TCP velocity vector [X, Y, Z, Rx, Ry, Rz]",
    "Deprecated": "",
    "Comment": "Returns the current measured TCP speed\r\n\r\nThe speed of the TCP retuned in a pose structure. The first three values are the cartesian speeds along x,y,z, and the last three define the current rotation axis, rx,ry,rz, and the length |rz,ry,rz| defines the angular velocity in radians/s.",
    "Parameters": []
  },
  {
    "Name": "get_actual_tool_flange_pose",
    "ReturnType": "Array",
    "Return": "The current actual tool flange vector: [X, Y, Z, Rx, Ry, Rz]",
    "Deprecated": "",
    "Comment": "Returns the current measured tool flange pose\r\n\r\nReturns the 6d pose representing the tool flange position and orientation specified in the base frame, without the Tool Center Point offset. The calculation of this pose is based on the actual robot encoder readings.",
    "Parameters": []
  },
  {
    "Name": "get_controller_temp",
    "ReturnType": "Float",
    "Return": "A temperature in degrees Celcius (float)",
    "Deprecated": "",
    "Comment": "Returns the temperature of the control box\r\n\r\nThe temperature of the robot control box in degrees Celcius",
    "Parameters": []
  },
  {
    "Name": "get_forward_kin",
    "ReturnType": "Pose",
    "Return": "tool pose",
    "Deprecated": "",
    "Comment": "Calculate the forward kinematic transformation (joint space -> tool space) using the calibrated robot kinematics. If no joint position vector is provided the current joint angles of the robot arm will be used. If no tcp is provided the currently active tcp of the controller will be used.",
    "Parameters": [
      {
        "Label": "q",
        "Type": "Array",
        "Comment": "joint position vector (Optional)",
        "Default": "\"current_joint_positions\""
      },
      {
        "Label": "tcp",
        "Type": "Pose",
        "Comment": "tcp offset pose (Optional)",
        "Default": "\"active_tcp\""
      }
    ]
  },
  {
    "Name": "get_inverse_kin",
    "ReturnType": "Pose",
    "Return": "joint positions",
    "Deprecated": "",
    "Comment": "Calculate the inverse kinematic transformation (tool space -> joint space). If qnear is defined, the solution closest to qnear is returned. Otherwise, the solution closest to the current joint positions is returned. If no tcp is provided the currently active tcp of the controller will be used.",
    "Parameters": [
      {
        "Label": "x",
        "Type": "Pose",
        "Comment": "tool pose",
        "Default": ""
      },
      {
        "Label": "qnear",
        "Type": "Array",
        "Comment": "list of joint positions (Optional)",
        "Default": ""
      },
      {
        "Label": "maxPositionError",
        "Type": "Number",
        "Comment": "the maximum allowed position error (Optional)",
        "Default": "1e-10"
      },
      {
        "Label": "maxOrientationError",
        "Type": "Number",
        "Comment": "the maximum allowed orientation error (Optional)",
        "Default": "1e-10"
      },
      {
        "Label": "tcp",
        "Type": "Pose",
        "Comment": "tcp offset pose (Optional)",
        "Default": "\"active_tcp\""
      }
    ]
  },
  {
    "Name": "get_joint_temp",
    "ReturnType": "Float",
    "Return": "A temperature in degrees Celcius (float)",
    "Deprecated": "",
    "Comment": "Returns the temperature of joint j\r\n\r\nThe temperature of the joint house of joint j, counting from zero. j=0 is the base joint, and j=5 is the last joint before the tool flange.",
    "Parameters": [
      {
        "Label": "j",
        "Type": "Int",
        "Comment": "The joint number (int)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_joint_torques",
    "ReturnType": "Array",
    "Return": "The joint torque vector in Nm: [Base, Shoulder, Elbow, Wrist1, Wrist2, Wrist3]",
    "Deprecated": "",
    "Comment": "Returns the torques of all joints\r\n\r\nThe torque on the joints, corrected by the torque needed to move the robot itself (gravity, friction, etc.), returned as a vector of length 6.",
    "Parameters": []
  },
  {
    "Name": "get_steptime",
    "ReturnType": "Int",
    "Return": "duration of the robot step in seconds",
    "Deprecated": "",
    "Comment": "Returns the duration of the robot time step in seconds.\r\n\r\nIn every time step, the robot controller will receive measured joint positions and velocities from the robot, and send desired joint positions and velocities back to the robot. This happens with a predetermined frequency, in regular intervals. This interval length is the robot time step.",
    "Parameters": []
  },
  {
    "Name": "get_target_joint_positions",
    "ReturnType": "Array",
    "Return": "The current target joint angular position vector in rad: [Base, Shoulder, Elbow, Wrist1, Wrist2, Wrist3]",
    "Deprecated": "",
    "Comment": "Returns the desired angular position of all joints\r\n\r\nThe angular target positions are expressed in radians and returned as a vector of length 6. Note that the output might differ from the output of `get_actual_joint_positions()`, especially during acceleration and heavy loads.",
    "Parameters": []
  },
  {
    "Name": "get_target_joint_speeds",
    "ReturnType": "Array",
    "Return": "The current target joint angular velocity vector in rad/s: [Base, Shoulder, Elbow, Wrist1, Wrist2, Wrist3]",
    "Deprecated": "",
    "Comment": "Returns the desired angular velocities of all joints\r\n\r\nThe angular target velocities are expressed in radians pr. second and returned as a vector of length 6. Note that the output might differ from the output of `get_actual_joint_speeds()`, especially during acceleration and heavy loads.",
    "Parameters": []
  },
  {
    "Name": "get_target_payload",
    "ReturnType": "Number",
    "Return": "The weight of the current payload in kilograms",
    "Deprecated": "",
    "Comment": "Returns the weight of the active payload",
    "Parameters": []
  },
  {
    "Name": "get_target_payload_cog",
    "ReturnType": "Array",
    "Return": "The 3d coordinates of the COG [CoGx, CoGy, CoGz] in meters",
    "Deprecated": "",
    "Comment": "Retrieve the Center Of Gravity (COG) coordinates of the active payload.\r\n\r\nThis scripts returns the COG coordinates of the active payload, with respect to the tool flange",
    "Parameters": []
  },
  {
    "Name": "get_target_tcp_pose",
    "ReturnType": "Array",
    "Return": "The current target TCP vector [X, Y, Z, Rx, Ry, Rz]",
    "Deprecated": "",
    "Comment": "Returns the current target tool pose\r\n\r\nReturns the 6d pose representing the tool position and orientation specified in the base frame. The calculation of this pose is based on the current target joint positions.",
    "Parameters": []
  },
  {
    "Name": "get_target_tcp_speed",
    "ReturnType": "Pose",
    "Return": "The TCP speed (pose)",
    "Deprecated": "",
    "Comment": "Returns the current target TCP speed\r\n\r\nThe desired speed of the TCP returned in a pose structure. The first three values are the cartesian speeds along x,y,z, and the last three define the current rotation axis, rx,ry,rz, and the length |rz,ry,rz| defines the angular velocity in radians/s.",
    "Parameters": []
  },
  {
    "Name": "get_tcp_force",
    "ReturnType": "Pose",
    "Return": "The wrench (pose)",
    "Deprecated": "",
    "Comment": "Returns the wrench (Force/Torque vector) at the TCP\r\n\r\nThe external wrench is computed based on the error between the joint torques required to stay on the trajectory and the expected joint torques. The function returns p[Fx (N), Fy(N), Fz(N), TRx (Nm), TRy (Nm), TRz (Nm)] where Fx, Fy, and Fz are the forces in the axes of the robot base coordinate system measured in Newtons, and TRx, TRy, and TRz are the torques around these axes measured in Newton times Meters.\r\n\r\nThe maximum force exerted along each axis is 300 Newtons.",
    "Parameters": []
  },
  {
    "Name": "get_tcp_offset",
    "ReturnType": "Pose",
    "Return": "tcp offset pose",
    "Deprecated": "",
    "Comment": "Gets the active tcp offset, i.e. the transformation from the output flange coordinate system to the TCP as a pose.",
    "Parameters": []
  },
  {
    "Name": "get_tool_accelerometer_reading",
    "ReturnType": "Array",
    "Return": "X, Y, and Z composant of the measured acceleration in SI-units (m/s^2)",
    "Deprecated": "",
    "Comment": "Returns the current reading of the tool accelerometer as a three-dimensional vector.\r\n\r\nThe accelerometer axes are aligned with the tool coordinates, and pointing an axis upwards results in a positive reading",
    "Parameters": []
  },
  {
    "Name": "get_tool_current",
    "ReturnType": "Number",
    "Return": "The tool current in ampere.",
    "Deprecated": "",
    "Comment": "Returns the tool current\r\n\r\nThe tool current consumption measured in ampere.",
    "Parameters": []
  },
  {
    "Name": "is_steady",
    "ReturnType": "Bool",
    "Return": "True when the robot is fully at rest. Returns False otherwise (bool)",
    "Deprecated": "",
    "Comment": "Checks if robot is fully at rest.\r\n\r\nTrue when the robot is fully at rest, and ready to accept higher external forces and torques, such as from industrial screwdrivers. It is useful in combination with the GUI’s wait node, before starting the screwdriver or other actuators influencing the position of the robot.",
    "Parameters": []
  },
  {
    "Name": "is_within_safety_limits",
    "ReturnType": "Bool",
    "Return": "True if within limits, false otherwise (bool)",
    "Deprecated": "",
    "Comment": "Checks if the given pose is reachable and within the current safety limits of the robot.\r\n\r\nThis check considers joint limits (if the target pose is specified as joint positions), safety planes limits, TCP orientation deviation limits and range of the robot. If a solution is found when applying the inverse kinematics to the given target TCP pose, this pose is considered reachable.",
    "Parameters": [
      {
        "Label": "pose",
        "Type": "Pose",
        "Comment": "Target pose (which can also be specified as joint positions)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "popup",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Display message in popup window on GUI.",
    "Parameters": [
      {
        "Label": "s",
        "Type": "String",
        "Comment": "message string",
        "Default": ""
      },
      {
        "Label": "title",
        "Type": "String",
        "Comment": "title string",
        "Default": "\"Popup\""
      },
      {
        "Label": "warning",
        "Type": "Bool",
        "Comment": "(boolean) warning message?",
        "Default": "False"
      },
      {
        "Label": "error",
        "Type": "Bool",
        "Comment": "(boolean) error message?",
        "Default": "False"
      },
      {
        "Label": "blocking",
        "Type": "Bool",
        "Comment": "if True, program will be suspended until \"continue\" is pressed",
        "Default": "False"
      }
    ]
  },
  {
    "Name": "powerdown",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Shutdown the robot, and power off the robot and controller.",
    "Parameters": []
  },
  {
    "Name": "set_gravity",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set the direction of the acceleration experienced by the robot. When the robot mounting is fixed, this corresponds to an accleration of g away from the earth’s centre.",
    "Parameters": [
      {
        "Label": "d",
        "Type": "Array",
        "Comment": "3D vector, describing the direction of the gravity, relative to the base of the robot.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_payload",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set payload mass and center of gravity\r\n\r\nSets the mass and center of gravity (abbr. CoG) of the payload.\r\n\r\nThis function must be called, when the payload weight or weight distribution changes - i.e when the robot picks up or puts down a heavy workpiece",
    "Parameters": [
      {
        "Label": "m",
        "Type": "Number",
        "Comment": "mass in kilograms",
        "Default": ""
      },
      {
        "Label": "cog",
        "Type": "Array",
        "Comment": "Center of Gravity, a vector [CoGx, CoGy, CoGz] specifying the displacement (in meters) from the toolmount.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_payload_cog",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "This function is deprecated. It is recommended to set always the CoG with the mass (see set_payload).",
    "Comment": "Set the Center of Gravity (CoG)",
    "Parameters": [
      {
        "Label": "cog",
        "Type": "Array",
        "Comment": "Center of Gravity, a vector [CoGx, CoGy, CoGz] specifying the displacement (in meters) from the toolmount.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_payload_mass",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set payload mass\r\n\r\nSets the mass of the payload and leaves the center of gravity (CoG)\r\nunchanged.",
    "Parameters": [
      {
        "Label": "m",
        "Type": "Number",
        "Comment": "mass in kilograms",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_tcp",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the active tcp offset, i.e. the transformation from the output flange coordinate system to the TCP as a pose.",
    "Parameters": [
      {
        "Label": "pose",
        "Type": "Pose",
        "Comment": "A pose describing the transformation",
        "Default": ""
      }
    ]
  },
  {
    "Name": "sleep",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sleep for an amount of time",
    "Parameters": [
      {
        "Label": "t",
        "Type": "Number",
        "Comment": "time [s]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "str_at",
    "ReturnType": "None",
    "Return": "String containing the byte at position `index` in the source string. An exception is raised if the index is not valid.",
    "Deprecated": "",
    "Comment": "Provides direct access to the bytes of a string.\r\n\r\nThis script returns a string containing the byte in the source string at the position corresponding to the specified index. It may not correspond to an actual character in case of strings with special encoded character (i.e. multi-byte or variable-length encoding)\r\n\r\nThe string is zero-indexed.",
    "Parameters": [
      {
        "Label": "src",
        "Type": "String",
        "Comment": "source string.",
        "Default": ""
      },
      {
        "Label": "index",
        "Type": "Int",
        "Comment": "integer specifying the position inside the source string",
        "Default": ""
      }
    ]
  },
  {
    "Name": "str_cat",
    "ReturnType": "String",
    "Return": "String concatenation of op1 and op2",
    "Deprecated": "",
    "Comment": "String concatenation\r\n\r\nThis script returns a string that is the concatenation of the two operands given as input. Both operands can be one of the following types: String, Boolean, Integer, Float, Pose, List of Boolean / Integer / Float / Pose. Any other type will raise an exception.\r\n\r\nThe resulting string cannot exceed 1023 characters, an exception is thrown otherwise.\r\n\r\nFloat numbers will be formatted with 6 decimals, and trailing zeros will be removed.\r\n\r\nThe function can be nested to create complex strings (see last example)",
    "Parameters": [
      {
        "Label": "op1",
        "Type": "String",
        "Comment": "first operand",
        "Default": ""
      },
      {
        "Label": "op2",
        "Type": "String",
        "Comment": "second operand",
        "Default": ""
      }
    ]
  },
  {
    "Name": "str_empty",
    "ReturnType": "Bool",
    "Return": "True if the string is empty, false otherwise",
    "Deprecated": "",
    "Comment": "Returns true when `str` is empty, false otherwise.",
    "Parameters": [
      {
        "Label": "str",
        "Type": "String",
        "Comment": "source string",
        "Default": ""
      }
    ]
  },
  {
    "Name": "str_find",
    "ReturnType": "Number",
    "Return": "The index of the first occurrence of target in `src`, -1 if `target` is not found in `src`.",
    "Deprecated": "",
    "Comment": "Finds the first occurrence of the substring target in src.\r\n\r\nThis script returns the index (i.e. byte) of the the first occurrence of substring `target` in `str`, starting from the given (optional) position.\r\n\r\nThe result may not correspond to the actual position of the first character of target in case `src` contains multi-byte or variable-length encoded characters.\r\n\r\nThe string is zero-indexed.",
    "Parameters": [
      {
        "Label": "src",
        "Type": "String",
        "Comment": "source string",
        "Default": ""
      },
      {
        "Label": "target",
        "Type": "String",
        "Comment": "substring to search",
        "Default": ""
      },
      {
        "Label": "start_from",
        "Type": "Number",
        "Comment": "optional starting position (default 0)",
        "Default": "0"
      }
    ]
  },
  {
    "Name": "str_len",
    "ReturnType": "Number",
    "Return": "The number of bytes in the input string.",
    "Deprecated": "",
    "Comment": "Returns the number of bytes in a string.\r\n\r\nPlease not that the value returned may not correspond to the actual number of characters in sequences of multi-byte or variable-length encoded characters.\r\n\r\nThe string is zero-indexed.",
    "Parameters": [
      {
        "Label": "str",
        "Type": "String",
        "Comment": "source string.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "str_sub",
    "ReturnType": "String",
    "Return": "the portion of src that starts at byte index and spans len characters",
    "Deprecated": "",
    "Comment": "Returns a substring of `src`.\r\n\r\nThe result is the substring of `src` that starts at the byte specified by index with length of at most `len` bytes. If the requested substring extends past the end of the original string (i.e. `index + len > src length`), the length of the resulting substring is limited to the size of `src`.\r\n\r\nAn exception is thrown in case `index` and/or `len` are out of bounds. The string is zero-indexed",
    "Parameters": [
      {
        "Label": "src",
        "Type": "String",
        "Comment": "source string",
        "Default": ""
      },
      {
        "Label": "index",
        "Type": "Int",
        "Comment": "integer value specifying the initial byte in the range [0, src length]",
        "Default": ""
      },
      {
        "Label": "len",
        "Type": "Int",
        "Comment": "(optional) length of the substring in the range [0, MAX_INT]. If len is not specified, the string in the range [index, src length]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "sync",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Uses up the remaining \"physical\" time a thread has in the current frame.",
    "Parameters": []
  },
  {
    "Name": "textmsg",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Send text message to log\r\n\r\nSend message with s1 and s2 concatenated to be shown on the GUI log-tab",
    "Parameters": [
      {
        "Label": "s1",
        "Type": "String",
        "Comment": "message string, variables of other types (int, bool poses etc.) can also be sent",
        "Default": ""
      },
      {
        "Label": "s2",
        "Type": "String",
        "Comment": "message string, variables of other types (int, bool poses etc.) can also be sent",
        "Default": "''"
      }
    ]
  },
  {
    "Name": "to_num",
    "ReturnType": "Number",
    "Return": "Integer or float number according to the input string",
    "Deprecated": "",
    "Comment": "Converts a string to a number.\r\n\r\n`to_num` returns an integer or a float depending on the presence of a decimal point in the input string. Only ’.’ is recognized as decimal point independent of locale settings.\r\n\r\nValid strings can contains optional leading white space(s) followed by an optional plus (’+’) or minus sign (’-’) and then one of the following:\r\n\r\n- A decimal number consisting of a sequence of decimal digits (e.g. 10, -5), an optional ’.’ to indicate a float number (e.g. 1.5234, -2.0, .36) and a optional decimal exponent that indicates multiplication by a power of 10 (e.g. 10e3, 2.5E-5, -5e-4)\r\n- A hexadecimal number consisting of \"0x\" or \"0X\" followed by a nonempty sequence of hexadecimal digits (e.g. \"0X3A\", \"0xb5\").\r\n- An infinity (either \"INF\" or \"INFINITY\", case insensitive)\r\n- A Not-a-Number (\"NAN\", case insensitive)\r\n\r\nRuntime exceptions are raised if the source string doesn’t contain a valid number or the result is out of range for the resulting type.",
    "Parameters": [
      {
        "Label": "str",
        "Type": "String",
        "Comment": "string to convert",
        "Default": ""
      }
    ]
  },
  {
    "Name": "to_str",
    "ReturnType": "String",
    "Return": "The string representation of the given value",
    "Deprecated": "",
    "Comment": "Gets string representation of a value.\r\n\r\nThis script converts a value of type Boolean, Integer, Float, Pose (or a list of those types) to a string.\r\n\r\nThe resulting string cannot exceed 1023 characters.\r\n\r\nFloat numbers will be formatted with 6 decimals, and trailing zeros will be removed.",
    "Parameters": [
      {
        "Label": "val",
        "Type": "Number",
        "Comment": "value to convert",
        "Default": ""
      }
    ]
  },
  {
    "Name": "acos",
    "ReturnType": "Float",
    "Return": "the arc cosine of f",
    "Deprecated": "",
    "Comment": "Returns the arc cosine of f\r\n\r\nReturns the principal value of the arc cosine of f, expressed in radians. A runtime error is raised if f lies outside the range [-1, 1]",
    "Parameters": [
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "asin",
    "ReturnType": "Float",
    "Return": "the arc sine of f",
    "Deprecated": "",
    "Comment": "Returns the arc sine of f\r\n\r\nReturns the principal value of the arc sine of f, expressed in radians. A runtime error is raised if f lies outside the range [-1, 1].",
    "Parameters": [
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "atan",
    "ReturnType": "Float",
    "Return": "the arc tangent of f",
    "Deprecated": "",
    "Comment": "Returns the arc tangent of f\r\n\r\nReturns the principal value of the arc tangent of f, expressed in radians",
    "Parameters": [
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "atan2",
    "ReturnType": "Float",
    "Return": "the arc tangent of x/y",
    "Deprecated": "",
    "Comment": "Returns the arc tangent of x/y\r\n\r\nReturns the principal value of the arc tangent of x/y, expressed in radians. To compute the value, the function uses the sign of both arguments to determine the quadrant.",
    "Parameters": [
      {
        "Label": "x",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      },
      {
        "Label": "y",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "binary_list_to_integer",
    "ReturnType": "Int",
    "Return": "The integer value of the binary list content",
    "Deprecated": "",
    "Comment": "Returns the value represented by the content of list l\r\n\r\nReturns the integer value represented by the bools contained in the list l when evaluated as a signed binary number",
    "Parameters": [
      {
        "Label": "l",
        "Type": "Array",
        "Comment": "The list of bools to be converted to an integer. The bool at index 0 is evaluated as the least significant bit. `False` represents a zero and `True` represents a one. If the list is empty this function returns 0. If the list contains more than 32 bools, the function returns the signed integer value of the first 32 bools in the list",
        "Default": ""
      }
    ]
  },
  {
    "Name": "ceil",
    "ReturnType": "Int",
    "Return": "rounded integer",
    "Deprecated": "",
    "Comment": "Returns the smallest integer value that is not less than f\r\n\r\nRounds floating point number to the smallest integer no greater than f",
    "Parameters": [
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "cos",
    "ReturnType": "Float",
    "Return": "the cosine of f",
    "Deprecated": "",
    "Comment": "Returns the cosine of f\r\n\r\nReturns the cosine of an angle of f **radians**",
    "Parameters": [
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "d2r",
    "ReturnType": "Number",
    "Return": "The angle in radians",
    "Deprecated": "",
    "Comment": "Returns degrees-to-radians of d\r\n\r\nReturns the radian value of 'd' degrees. Actually: (d/180)*MATH_PI",
    "Parameters": [
      {
        "Label": "d",
        "Type": "Number",
        "Comment": "The angle in degrees",
        "Default": ""
      }
    ]
  },
  {
    "Name": "ﬂoor",
    "ReturnType": "Int",
    "Return": "rounded integer",
    "Deprecated": "",
    "Comment": "Returns largest integer not greater than f\r\n\r\nRounds floating point number to the largest integer no greater than f",
    "Parameters": [
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_list_length",
    "ReturnType": "Int",
    "Return": "An integer specifying the length of the given list",
    "Deprecated": "",
    "Comment": "Returns the length of a list variable\r\n\r\nThe length of a list is the number of entries the list is composed of",
    "Parameters": [
      {
        "Label": "v",
        "Type": "Array",
        "Comment": "A list variable",
        "Default": ""
      }
    ]
  },
  {
    "Name": "integer_to_binary_list",
    "ReturnType": "Array",
    "Return": "A list of 32 bools, where False represents a zero and True represents a one. The bool at index 0 is the least significant bit.",
    "Deprecated": "",
    "Comment": "Returns the binary representation of x\r\n\r\nReturns a list of bools as the binary representation of the signed integer value x.",
    "Parameters": [
      {
        "Label": "x",
        "Type": "Int",
        "Comment": "The integer value to be converted to a binary list",
        "Default": ""
      }
    ]
  },
  {
    "Name": "interpolate_pose",
    "ReturnType": "Pose",
    "Return": "interpolated pose (pose)",
    "Deprecated": "",
    "Comment": "Linear interpolation of tool position and orientation.\r\n\r\nWhen alpha is 0, returns p_from. When alpha is 1, returns p_to. As alpha goes from 0 to 1, returns a pose going in a straight line (and geodetic orientation change) from p_from to p_to. If alpha is less than 0, returns a point before p_from on the line. If alpha is greater than 1, returns a pose after p_to on the line",
    "Parameters": [
      {
        "Label": "p_from",
        "Type": "Pose",
        "Comment": "tool pose (pose)",
        "Default": ""
      },
      {
        "Label": "p_to",
        "Type": "Pose",
        "Comment": "tool pose (pose)",
        "Default": ""
      },
      {
        "Label": "alpha",
        "Type": "Float",
        "Comment": "Floating point number",
        "Default": ""
      }
    ]
  },
  {
    "Name": "length",
    "ReturnType": "Int",
    "Return": "An integer specifying the length of the given list or string",
    "Deprecated": "",
    "Comment": "Returns the length of a list variable or a string\r\n\r\nThe length of a list or string is the number of entries or characters it is composed of",
    "Parameters": [
      {
        "Label": "v",
        "Type": "Array",
        "Comment": "A list or string variable",
        "Default": ""
      }
    ]
  },
  {
    "Name": "log",
    "ReturnType": "Float",
    "Return": "the logarithm of f to the base of b",
    "Deprecated": "",
    "Comment": "Returns the logarithm of f to the base b\r\n\r\nReturns the logarithm of f to the base b. If b or f is negative, or if b is 1 a runtime error is raised",
    "Parameters": [
      {
        "Label": "b",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      },
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "norm",
    "ReturnType": "Number",
    "Return": "norm of a",
    "Deprecated": "",
    "Comment": "Returns the norm of the argument\r\n\r\nThe argument can be one of four different types:\r\n\r\n`Pose` In this case the euclidian norm of the pose is returned.\r\n`Float` In this case fabs(a) is returned.\r\n`Int` In this case abs(a) is returned.\r\n`List` In this case the euclidian norm of the list is returned, the list elements must be numbers.",
    "Parameters": [
      {
        "Label": "a",
        "Type": "Number",
        "Comment": "Pose, float, int or List",
        "Default": ""
      }
    ]
  },
  {
    "Name": "normalize",
    "ReturnType": "Array",
    "Return": "normalized form of v",
    "Deprecated": "",
    "Comment": "Returns the normalized form of a list of floats\r\n\r\nExcept for the case of all zeroes, the normalized form corresponds to the unit vector in the direction of v.\r\n\r\nThrows an exception if the sum of all squared elements is zero",
    "Parameters": [
      {
        "Label": "v",
        "Type": "Array",
        "Comment": "List of floats",
        "Default": ""
      }
    ]
  },
  {
    "Name": "point_dist",
    "ReturnType": "Number",
    "Return": "Distance between the two tool positions (without considering rotations)",
    "Deprecated": "",
    "Comment": "Point distance",
    "Parameters": [
      {
        "Label": "p_from",
        "Type": "Pose",
        "Comment": "tool pose (pose)",
        "Default": ""
      },
      {
        "Label": "p_to",
        "Type": "Pose",
        "Comment": "tool pose (pose)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "pose_add",
    "ReturnType": "Pose",
    "Return": "Sum of position parts and product of rotation parts (pose)",
    "Deprecated": "",
    "Comment": "Pose addition\r\n\r\nBoth arguments contain three position parameters (x, y, z) jointly called P, and three rotation parameters (R_x, R_y, R_z) jointly called R. This function calculates the result x_3 as the addition of the given poses as follows:\r\n\r\n```\r\np_3.P = p_1.P + p_2.P\r\np_3.R = p_1.R * p_2.R\r\n```",
    "Parameters": [
      {
        "Label": "p_1",
        "Type": "Pose",
        "Comment": "tool pose 1 (pose)",
        "Default": ""
      },
      {
        "Label": "p_2",
        "Type": "Pose",
        "Comment": "tool pose 2 (pose)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "pose_dist",
    "ReturnType": "Number",
    "Return": "distance",
    "Deprecated": "",
    "Comment": "Pose distance",
    "Parameters": [
      {
        "Label": "p_from",
        "Type": "Pose",
        "Comment": "tool pose (pose)",
        "Default": ""
      },
      {
        "Label": "p_to",
        "Type": "Pose",
        "Comment": "tool pose (pose)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "pose_inv",
    "ReturnType": "Pose",
    "Return": "inverse tool pose transformation (spatial vector)",
    "Deprecated": "",
    "Comment": "Get the inverse of a pose",
    "Parameters": [
      {
        "Label": "p_from",
        "Type": "Pose",
        "Comment": "tool pose (spatial vector)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "pose_sub",
    "ReturnType": "Pose",
    "Return": "tool pose transformation (spatial vector)",
    "Deprecated": "",
    "Comment": "Pose subtraction",
    "Parameters": [
      {
        "Label": "p_to",
        "Type": "Pose",
        "Comment": "tool pose (spatial vector)",
        "Default": ""
      },
      {
        "Label": "p_from",
        "Type": "Pose",
        "Comment": "tool pose (spatial vector)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "pose_trans",
    "ReturnType": "Pose",
    "Return": "resulting pose (spatial vector)",
    "Deprecated": "",
    "Comment": "Pose transformation\r\n\r\nThe first argument, p_from, is used to transform the second argument, p_from_to, and the result is then returned. This means that the result is the resulting pose, when starting at the coordinate system of p_from, and then in that coordinate system moving p_from_to.\r\n\r\nThis function can be seen in two different views. Either the function transforms, that is translates and rotates, p_from_to by the parameters of p_from. Or the function is used to get the resulting pose, when first making a move of p_from and then from there, a move of p_from_to.\r\n\r\nIf the poses were regarded as transformation matrices, it would look like:\r\n\r\n```\r\nT_world->to = T_world->from * T_from->to\r\nT_x->to = T_x->from * T_from->to\r\n```",
    "Parameters": [
      {
        "Label": "p_from",
        "Type": "Pose",
        "Comment": "arting pose (spatial vector)",
        "Default": ""
      },
      {
        "Label": "p_from_to",
        "Type": "Pose",
        "Comment": "pose change relative to starting pose (spatial vector)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "pow",
    "ReturnType": "Float",
    "Return": "base raised to the power of exponent",
    "Deprecated": "",
    "Comment": "Returns base raised to the power of exponent\r\n\r\nReturns the result of raising base to the power of exponent. If base is negative and exponent is not an integral value, or if base is zero and exponent is negative, a runtime error is raised.",
    "Parameters": [
      {
        "Label": "base",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      },
      {
        "Label": "exponent",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "r2d",
    "ReturnType": "Number",
    "Return": "The angle in degrees",
    "Deprecated": "",
    "Comment": "Returns radians-to-degrees of r\r\n\r\nReturns the degree value of 'r' radians",
    "Parameters": [
      {
        "Label": "r",
        "Type": "Number",
        "Comment": "The angle in radians",
        "Default": ""
      }
    ]
  },
  {
    "Name": "random",
    "ReturnType": "Float",
    "Return": "pseudo-random number between 0 and 1 (float)",
    "Deprecated": "",
    "Comment": "Random Number",
    "Parameters": []
  },
  {
    "Name": "rotvec2rpy",
    "ReturnType": "Array",
    "Return": "The RPY vector (Vector3d) in radians, describing a roll-pitch-yaw sequence of extrinsic rotations about the X-Y-Z axes, (corresponding to intrinsic rotations about the Z-Y'-X\" axes). In matrix form the RPY vector is defined as `Rrpy = Rz(yaw)Ry(pitch)Rx(roll)`.",
    "Deprecated": "",
    "Comment": "eturns RPY vector corresponding to rotation_vector\r\n\r\nReturns the RPY vector corresponding to `rotation_vector` where the rotation vector is the axis of rotation with a length corresponding to the angle of rotation in radians.",
    "Parameters": [
      {
        "Label": "rotation_vector",
        "Type": "Array",
        "Comment": "The rotation vector (Vector3d) in radians, also called the Axis-Angle vector (unit-axis of rotation multiplied by the rotation angle in radians).",
        "Default": ""
      }
    ]
  },
  {
    "Name": "rpy2rotvec",
    "ReturnType": "Array",
    "Return": "The rotation vector (Vector3d) in radians, also called the Axis-Angle vector (unit-axis of rotation multiplied by the rotation angle in radians).",
    "Deprecated": "",
    "Comment": "Returns rotation vector corresponding to rpy_vector\r\n\r\nReturns the rotation vector corresponding to `rpy_vector` where the RPY (roll-pitch-yaw) rotations are extrinsic rotations about the X-Y-Z axes (corresponding to intrinsic rotations about the Z-Y’-X” axes).",
    "Parameters": [
      {
        "Label": "rpy_vector",
        "Type": "Array",
        "Comment": "The RPY vector (Vector3d) in radians, describing a roll-pitch-yaw sequence of extrinsic rotations about the X-Y-Z axes, (corresponding to intrinsic rotations about the Z-Y'-X\" axes). In matrix form the RPY vector is defined as `Rrpy = Rz(yaw)Ry(pitch)Rx(roll)`.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "sin",
    "ReturnType": "Float",
    "Return": "the sine of f",
    "Deprecated": "",
    "Comment": "Returns the sine of f\r\n\r\nReturns the sine of an angle of f radians",
    "Parameters": [
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "sqrt",
    "ReturnType": "Float",
    "Return": "the square root of f.",
    "Deprecated": "",
    "Comment": "Returns the square root of f\r\n\r\nReturns the square root of f. If f is negative, a runtime error is raised",
    "Parameters": [
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "tan",
    "ReturnType": "Float",
    "Return": "the tangent of f.",
    "Deprecated": "",
    "Comment": "Returns the tangent of f\r\n\r\nReturns the tangent of an angle of f radians.",
    "Parameters": [
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "floating point value",
        "Default": ""
      }
    ]
  },
  {
    "Name": "wrench_trans",
    "ReturnType": "Array",
    "Return": "resulting wrench, w_to in list format [F_x, F_y, F_z, M_x, M_y,\r\nM_z]",
    "Deprecated": "",
    "Comment": "Wrench transformation\r\n\r\nMove the point of view of a wrench.\r\n\r\nNote: Transforming wrenches is not as trivial as transforming poses as the torque scales with the length of the translation.\r\n\r\n```\r\nw_to = T_from->to * w_from\r\n```",
    "Parameters": [
      {
        "Label": "T_from_to",
        "Type": "Pose",
        "Comment": "The transformation to the new point of view (Pose)",
        "Default": ""
      },
      {
        "Label": "w_from",
        "Type": "Array",
        "Comment": "wrench to transform in list format [F_x, F_y, F_z,\r\nM_x, M_y, M_z]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_analog_in",
    "ReturnType": "Float",
    "Return": "float, The signal level in Amperes, or Volts",
    "Deprecated": "The `get_standard_analog_in` and `get_tool_analog_in` replace this function. Ports 2-3 should be changed to 0-1 for the latter function. This function might be removed in the next major release.",
    "Comment": "Get analog input signal level",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the input, integer: [0:3]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_analog_out",
    "ReturnType": "Float",
    "Return": "float, The signal level in Amperes, or Volts",
    "Deprecated": "The `get_standard_analog_out` replaces this function. This function might be removed in the next major release",
    "Comment": "Get analog output signal level",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:1]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_configurable_digital_in",
    "ReturnType": "Bool",
    "Return": "boolean, The signal level.",
    "Deprecated": "",
    "Comment": "Get configurable digital input signal level\r\n\r\nSee also `get_standard_digital_in` and `get_tool_digital_in`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the input, integer: [0:7]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_configurable_digital_out",
    "ReturnType": "Bool",
    "Return": "boolean, The signal level.",
    "Deprecated": "",
    "Comment": "Get configurable digital output signal level\r\n\r\nSee also `get_standard_digital_out` and `get_tool_digital_out`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:7]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_digital_in",
    "ReturnType": "Bool",
    "Return": "boolean, The signal level.",
    "Deprecated": "The `get_standard_digital_in` and `get_tool_digital_in` replace this function. Ports 8-9 should be changed to 0-1 for the latter function. This function might be removed in the next major release.",
    "Comment": "Get digital input signal level",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the input, integer: [0:9]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_digital_out",
    "ReturnType": "Bool",
    "Return": "boolean, The signal level.",
    "Deprecated": "The `get_standard_digital_out` and `get_tool_digital_out` replace this function. Ports 8-9 should be changed to 0-1 for the latter function. This function might be removed in the next major release",
    "Comment": "Get digital output signal level",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:9]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_euromap_input",
    "ReturnType": "Bool",
    "Return": "boolean, either True or False",
    "Deprecated": "",
    "Comment": "Reads the current value of a specific Euromap67 input signal. See [Supports](http://universal-robots.com/support) for signal specifications.",
    "Parameters": [
      {
        "Label": "port_number",
        "Type": "Int",
        "Comment": "An integer specifying one of the available Euromap67 input signals.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_euromap_output",
    "ReturnType": "Bool",
    "Return": "A boolean, either True or False",
    "Deprecated": "",
    "Comment": "Reads the current value of a specific Euromap67 output signal. This means the value that is sent from the robot to the injection moulding machine.\r\n\r\nSee [Supports](http://universal-robots.com/support) for signal specifications.",
    "Parameters": [
      {
        "Label": "port_number",
        "Type": "Int",
        "Comment": "An integer specifying one of the available Euromap67 output signals",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_ﬂag",
    "ReturnType": "Bool",
    "Return": "Boolean, The stored bit.",
    "Deprecated": "",
    "Comment": "Flags behave like internal digital outputs. They keep information between program runs.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the ﬂag, intereger: [0:32]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_standard_analog_in",
    "ReturnType": "Float",
    "Return": "float, The signal level in Amperes, or Volts",
    "Deprecated": "",
    "Comment": "Get standard analog input signal level\r\n\r\nSee also `get_tool_analog_in`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the input, integer: [0:1]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_standard_analog_out",
    "ReturnType": "Float",
    "Return": "float, The signal level in Amperes, or Volts",
    "Deprecated": "",
    "Comment": "Get standard analog output signal level",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:1]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_standard_digital_in",
    "ReturnType": "Bool",
    "Return": "boolean, The signal level.",
    "Deprecated": "",
    "Comment": "Get standard digital input signal level\r\n\r\nSee also `get_configurable_digital_in` and `get_tool_digital_in`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the input, integer: [0:7]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_standard_digital_out",
    "ReturnType": "Bool",
    "Return": "boolean, The signal level.",
    "Deprecated": "",
    "Comment": "Get standard digital output signal level\r\n\r\nSee also `get_configurable_digital_out` and `get_tool_digital_out`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:7]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_tool_analog_in",
    "ReturnType": "Float",
    "Return": "float, The signal level in Amperes, or Volts",
    "Deprecated": "",
    "Comment": "Get tool analog input signal level\r\n\r\nSee also `get_standard_analog_in`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the input, integer: [0:1]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_tool_digital_in",
    "ReturnType": "Bool",
    "Return": "boolean, The signal level.",
    "Deprecated": "",
    "Comment": "Get tool digital input signal level\r\n\r\nSee also `get_configurable_digital_in` and `get_standard_digital_in`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the input, integer: [0:1]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "get_tool_digital_out",
    "ReturnType": "Bool",
    "Return": "boolean, The signal level.",
    "Deprecated": "",
    "Comment": "Get tool digital output signal level\r\n\r\nSee also `get_standard_digital_out` and `get_configurable_digital_out`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:1]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "modbus_add_signal",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Adds a new modbus signal for the controller to supervise. Expects no response.",
    "Parameters": [
      {
        "Label": "IP",
        "Type": "String",
        "Comment": "A string specifying the IP address of the modbus unit to which the modbus signal is connected.",
        "Default": ""
      },
      {
        "Label": "slave_number",
        "Type": "Int",
        "Comment": "An integer normally not used and set to 255, but is a free choice between 0 and 255.",
        "Default": ""
      },
      {
        "Label": "signal_address",
        "Type": "Int",
        "Comment": "An integer specifying the address of the either the coil or the register that this new signal should reﬂect. Consult the configuration of the modbus unit for this information.",
        "Default": ""
      },
      {
        "Label": "signal_type",
        "Type": "Int",
        "Comment": "An integer specifying the type of signal to add. 0 = digital input, 1 = digital output, 2 = register input and 3 = register output.",
        "Default": ""
      },
      {
        "Label": "signal_name",
        "Type": "String",
        "Comment": "A string uniquely identifying the signal. If a string is supplied which is equal to an already added signal, the new signal will replace the old one. The length of the string cannot exceed 20 characters.",
        "Default": ""
      },
      {
        "Label": "sequential_mode",
        "Type": "Bool",
        "Comment": "Setting to True forces the modbus client to wait for a response before sending the next request. This mode is required by some fieldbus units (Optional).",
        "Default": "False"
      }
    ]
  },
  {
    "Name": "modbus_delete_signal",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Deletes the signal identified by the supplied signal name.",
    "Parameters": [
      {
        "Label": "signal_name",
        "Type": "String",
        "Comment": "A string equal to the name of the signal that should be deleted.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "modbus_get_signal_status",
    "ReturnType": "Int",
    "Return": "An integer or a boolean. For digital signals: True or False. For register signals: The register value expressed as an unsigned integer.",
    "Deprecated": "",
    "Comment": "Reads the current value of a specific signal.",
    "Parameters": [
      {
        "Label": "signal_name",
        "Type": "String",
        "Comment": "A string equal to the name of the signal for which the value should be gotten.",
        "Default": ""
      },
      {
        "Label": "is_secondary_program",
        "Type": "Bool",
        "Comment": "A boolean for internal use only. Must be set to `False`.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "modbus_send_custom_command",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sends a command specified by the user to the modbus unit located on the specified IP address. Cannot be used to request data, since the response will not be received. The user is responsible for supplying data which is meaningful to the supplied function code. The builtin function takes care of constructing the modbus frame, so the user should not be concerned with the length of the command.",
    "Parameters": [
      {
        "Label": "IP",
        "Type": "String",
        "Comment": "A string specifying the IP address locating the modbus unit to which the custom command should be send.",
        "Default": ""
      },
      {
        "Label": "slave_number",
        "Type": "Int",
        "Comment": "An integer specifying the slave number to use for the custom command.",
        "Default": ""
      },
      {
        "Label": "function_code",
        "Type": "Int",
        "Comment": "An integer specifying the function code for the custom command.",
        "Default": ""
      },
      {
        "Label": "data",
        "Type": "Array",
        "Comment": "An array of integers in which each entry must be a valid byte (0-255) value.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "modbus_set_digital_input_action",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the selected digital input signal to either a `\"default\"` or `\"freedrive\"` action.",
    "Parameters": [
      {
        "Label": "signal_name",
        "Type": "String",
        "Comment": "A string identifying a digital input signal that was previously added.",
        "Default": ""
      },
      {
        "Label": "action",
        "Type": "String",
        "Comment": "The type of action. The action can either be `\"default\"` or `\"freedrive\"`. (string)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "modbus_set_output_register",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the output register signal identified by the given name to the given\r\nvalue.",
    "Parameters": [
      {
        "Label": "signal_name",
        "Type": "String",
        "Comment": "A string identifying an output register signal that in advance has been added.",
        "Default": ""
      },
      {
        "Label": "register_value",
        "Type": "Int",
        "Comment": "An integer which must be a valid word (0-65535) value.",
        "Default": ""
      },
      {
        "Label": "is_secondary_program",
        "Type": "Bool",
        "Comment": "A boolean for interal use only. Must be set to `False`.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "modbus_set_output_signal",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the output digital signal identified by the given name to the given value.",
    "Parameters": [
      {
        "Label": "signal_name",
        "Type": "String",
        "Comment": "A string identifying an output digital signal that in advance has been added.",
        "Default": ""
      },
      {
        "Label": "digital_value",
        "Type": "Bool",
        "Comment": "A boolean to which value the signal will be set.",
        "Default": ""
      },
      {
        "Label": "is_secondary_program",
        "Type": "Bool",
        "Comment": "A boolean for interal use only. Must be set to `False`.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "modbus_set_signal_update_frequency",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the frequency with which the robot will send requests to the Modbus controller to either read or write the signal value.",
    "Parameters": [
      {
        "Label": "signal_name",
        "Type": "String",
        "Comment": "A string identifying an output digital signal that in advance has been added.",
        "Default": ""
      },
      {
        "Label": "update_frequency",
        "Type": "Int",
        "Comment": "An integer in the range 0-125 specifying the update frequency in Hz.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "read_input_boolean_register",
    "ReturnType": "Bool",
    "Return": "The boolean value held by the register (`True`, `False`)",
    "Deprecated": "",
    "Comment": "Reads the boolean from one of the input registers, which can also be accessed by a Field bus. Note, uses it’s own memory space.",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the register (0:127)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "read_input_float_register",
    "ReturnType": "Float",
    "Return": "The value held by the register (float)",
    "Deprecated": "",
    "Comment": "Reads the float from one of the input registers, which can also be accessed by a Field bus. Note, uses it’s own memory space.",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the register (0:47)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "read_input_integer_register",
    "ReturnType": "Int",
    "Return": "The value held by the register [-2,147,483,648 : 2,147,483,647]",
    "Deprecated": "",
    "Comment": "Reads the integer from one of the input registers, which can also be accessed by a Field bus. Note, uses it’s own memory space.",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the register (0:47)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "read_output_boolean_register",
    "ReturnType": "Bool",
    "Return": "The boolean value held by the register (`True`, `False`)",
    "Deprecated": "",
    "Comment": "Reads the boolean from one of the output registers, which can also be accessed by a Field bus. Note, uses it’s own memory space.",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the register (0:127)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "read_output_float_register",
    "ReturnType": "Float",
    "Return": "The value held by the register (float)",
    "Deprecated": "",
    "Comment": "Reads the float from one of the output registers, which can also be accessed by a Field bus. Note, uses it’s own memory space.",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the register (0:47)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "read_output_integer_register",
    "ReturnType": "Int",
    "Return": "The int value held by the register [-2,147,483,648 : 2,147,483,647]",
    "Deprecated": "",
    "Comment": "Reads the integer from one of the output registers, which can also be accessed by a Field bus. Note, uses it’s own memory space.",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the register (0:47)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "read_port_bit",
    "ReturnType": "Bool",
    "Return": "The value held by the port (`True`, `False`)",
    "Deprecated": "",
    "Comment": "Reads one of the ports, which can also be accessed by Modbus clients",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the port (See portmap on Support site, page \"UsingModbusServer\" )",
        "Default": ""
      }
    ]
  },
  {
    "Name": "read_port_register",
    "ReturnType": "Int",
    "Return": "The signed integer value held by the port (-32768 : 32767)",
    "Deprecated": "",
    "Comment": "Reads one of the ports, which can also be accessed by Modbus clients",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the port (See portmap on Support site, page \"UsingModbusServer\" )",
        "Default": ""
      }
    ]
  },
  {
    "Name": "rpc_factory",
    "ReturnType": "Number",
    "Return": "A RPC handle with a connection to the specified server using the designated RPC backend. If the server is not available the function and program will fail. Any function that is made available on the server can be called using this instance. For example \"bool isTargetAvailable(int number, ...)\" would be \"proxy.isTargetAvailable(var_1, ...)\", whereby any number of arguments are supported (denoted by the ...).",
    "Deprecated": "",
    "Comment": "Creates a new Remote Procedure Call (RPC) handle. Please read the subsection ef{Remote Procedure Call (RPC)} for a more detailed description of RPCs.",
    "Parameters": [
      {
        "Label": "type",
        "Type": "String",
        "Comment": "The type of RPC backed to use. Currently only the `\"xmlrpc\"` protocol is available.",
        "Default": ""
      },
      {
        "Label": "url",
        "Type": "String",
        "Comment": "The URL to the RPC server. Currently two protocols are supported: pstream and http.\r\n\r\nThe pstream URL looks like `\"<ip-address>:<port>\"`, for instance \"127.0.0.1:8080\" to make a local connection on port 8080.\r\n\r\nA http URL generally looks like `\"http://<ip-address>:<port>/<path>\"`, whereby the `<path>` depends on the setup of the http server. In the example given above a connection to a local Python webserver on port 8080 is made, which expects XMLRPC calls to come in on the path \"RPC2\".",
        "Default": ""
      }
    ]
  },
  {
    "Name": "rtde_set_watchdog",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "This function will activate a watchdog for a particular input variable to the RTDE. When the watchdog did not receive an input update for the specified variable in the time period specified by min_frequency (Hz), the corresponding action will be taken. All watchdogs are removed on program stop.",
    "Parameters": [
      {
        "Label": "variable_name",
        "Type": "String",
        "Comment": "Input variable name (string), as specified by the RTDE interface",
        "Default": ""
      },
      {
        "Label": "min_frequency",
        "Type": "Float",
        "Comment": "The minimum frequency (float) an input update is expected to arrive.",
        "Default": ""
      },
      {
        "Label": "action",
        "Type": "String",
        "Comment": "Optional: Either \"ignore\", \"pause\" or \"stop\" the program on a violation of the minimum frequency. The default action is \"pause\".",
        "Default": "\"pause\""
      }
    ]
  },
  {
    "Name": "set_analog_inputrange",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "The `set_standard_analog_input_domain` and  `set_tool_analog_input_domain` replace this function. Ports 2-3 should be changed to 0-1 for the latter function. This function might be removed in the next major release.",
    "Comment": "Set range of analog inputs\r\n\r\nPort 0 and 1 is in the controller box, 2 and 3 is in the tool connector.",
    "Parameters": [
      {
        "Label": "port",
        "Type": "Int",
        "Comment": "analog input port number, 0,1 = controller, 2,3 = tool",
        "Default": ""
      },
      {
        "Label": "range",
        "Type": "Int",
        "Comment": "Controller analog input range 0: 0-5V (maps automatically onto range 2) and range 2: 0-10V.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_analog_out",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "The `set_standard_analog_out` replaces this function. This function might be removed in the next major release.",
    "Comment": "Set analog output signal level",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:1]",
        "Default": ""
      },
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "The relative signal level [0;1] (float)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_configurable_digital_out",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set configurable digital output signal level\r\n\r\nSee also `set_standard_digital_out` and `set_tool_digital_out`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:7]",
        "Default": ""
      },
      {
        "Label": "b",
        "Type": "Bool",
        "Comment": "The signal level. (boolean)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_digital_out",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "The `set_standard_digital_out` and `set_tool_digital_out` replace this function. Ports 8-9 should be changed to 0-1 for the latter function. This function might be removed in the next major release.",
    "Comment": "Set digital output signal level",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:9]",
        "Default": ""
      },
      {
        "Label": "b",
        "Type": "Bool",
        "Comment": "The signal level. (boolean)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_euromap_output",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the value of a specific Euromap67 output signal. This means the value that is sent from the robot to the injection moulding machine.\r\n\r\nSee [Supports](http://universal-robots.com/support) for signal specifications.",
    "Parameters": [
      {
        "Label": "port_number",
        "Type": "Int",
        "Comment": "An integer specifying one of the available Euromap67 output signals.",
        "Default": ""
      },
      {
        "Label": "signal_value",
        "Type": "Bool",
        "Comment": "A boolean, either `True` or `False`",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_euromap_runstate_dependent_choice",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets whether an Euromap67 output signal must preserve its state from a program, or it must be set either high or low when a program is not running.\r\n\r\nSee [Supports](http://universal-robots.com/support) for signal specifications.",
    "Parameters": [
      {
        "Label": "port_number",
        "Type": "Int",
        "Comment": "An integer specifying a Euromap67 output signal.",
        "Default": ""
      },
      {
        "Label": "runstate_choice",
        "Type": "Int",
        "Comment": "An integer:\r\n\r\n* `0` preserve program state\r\n* `1` set low when a program is not running\r\n* `2` set high when a program is not running",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_ﬂag",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Flags behave like internal digital outputs. They keep information between program runs.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the ﬂag, integer: [0:32]",
        "Default": ""
      },
      {
        "Label": "b",
        "Type": "Bool",
        "Comment": "The stored bit. (boolean)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_standard_analog_out",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set standard analog output signal level",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:1]",
        "Default": ""
      },
      {
        "Label": "f",
        "Type": "Float",
        "Comment": "The relative signal level [0;1] (float)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_standard_digital_out",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set standard digital output signal level\r\n\r\nSee also `set_configurable_digital_out` and `set_tool_digital_out`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:7]",
        "Default": ""
      },
      {
        "Label": "b",
        "Type": "Bool",
        "Comment": "The signal level. (boolean)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_tool_digital_out",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set tool digital output signal level\r\n\r\nSee also `set_configurable_digital_out` and `set_standard_digital_out`.",
    "Parameters": [
      {
        "Label": "n",
        "Type": "Int",
        "Comment": "The number (id) of the output, integer: [0:1]",
        "Default": ""
      },
      {
        "Label": "b",
        "Type": "Bool",
        "Comment": "The signal level. (boolean)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_tool_voltage",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the voltage level for the power supply that delivers power to the connector plug in the tool ﬂange of the robot. The votage can be 0, 12 or 24 volts.",
    "Parameters": [
      {
        "Label": "voltage",
        "Type": "Int",
        "Comment": "The voltage (as an integer) at the tool connector, integer: 0, 12 or 24.",
        "Default": ""
      }
    ]
  },
  {
    "Name": "socket_close",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Closes TCP/IP socket communication\r\n\r\nCloses down the socket connection to the server.",
    "Parameters": [
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      }
    ]
  },
  {
    "Name": "socket_get_var",
    "ReturnType": "Int",
    "Return": "an integer from the server (int), 0 is the timeout value",
    "Deprecated": "",
    "Comment": "Reads an integer from the server\r\n\r\nSends the message `\"GET <name>\\n\"` through the socket, expects the response `\"<name> <int>\\n\"` within 2 seconds. Returns 0 after timeout",
    "Parameters": [
      {
        "Label": "name",
        "Type": "String",
        "Comment": "Variable name (string)",
        "Default": ""
      },
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      }
    ]
  },
  {
    "Name": "socket_open",
    "ReturnType": "Bool",
    "Return": "`False` if failed, `True` if connection succesfully established",
    "Deprecated": "",
    "Comment": "Open TCP/IP ethernet communication socket\r\n\r\nAttempts to open a socket connection, times out after 2 seconds.",
    "Parameters": [
      {
        "Label": "address",
        "Type": "String",
        "Comment": "Server address (string)",
        "Default": ""
      },
      {
        "Label": "port",
        "Type": "Int",
        "Comment": "Port number (int)",
        "Default": ""
      },
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      }
    ]
  },
  {
    "Name": "socket_read_ascii_float",
    "ReturnType": "Array",
    "Return": "A list of numbers read (list of floats, length=number+1)",
    "Deprecated": "",
    "Comment": "Reads a number of ascii formatted floats from the socket. A maximum\r\nof 30 values can be read in one command.\r\n\r\nThe format of the numbers should be in parantheses, and seperated by \",\". An example list of four numbers could look like \"( 1.414 , 3.14159, 1.616, 0.0 )\".\r\n\r\nThe returned list contains the total numbers read, and then each number in succession. For example a read_ascii_float on the example above would return [4, 1.414, 3.14159, 1.616, 0.0].\r\n\r\nA failed read or timeout will return the list with 0 as first element and then \"Not a number (nan)\" in the following elements (ex. [0, nan, nan, nan] for a read of three numbers).",
    "Parameters": [
      {
        "Label": "number",
        "Type": "Int",
        "Comment": "The number of variables to read (int)",
        "Default": ""
      },
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      },
      {
        "Label": "timeout",
        "Type": "Float",
        "Comment": "The number of seconds until the read action times out (float). A timeout of 0 or negative number indicates that the function should not return until a read is completed.",
        "Default": "2"
      }
    ]
  },
  {
    "Name": "socket_read_binary_integer",
    "ReturnType": "Array",
    "Return": "A list of numbers read (list of ints, length=number+1)",
    "Deprecated": "",
    "Comment": "Reads a number of 32 bit integers from the socket. Bytes are in network byte order. A maximum of 30 values can be read in one command.\r\n\r\nReturns (for example) [3,100,2000,30000], if there is a timeout or the reply is invalid, [0,-1,-1,-1] is returned, indicating that 0 integers have been read",
    "Parameters": [
      {
        "Label": "number",
        "Type": "Int",
        "Comment": "The number of variables to read (int)",
        "Default": ""
      },
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      },
      {
        "Label": "timeout",
        "Type": "Float",
        "Comment": "The number of seconds until the read action times out (float). A timeout of 0 or negative number indicates that the function should not return until a read is completed.",
        "Default": "2"
      }
    ]
  },
  {
    "Name": "socket_read_byte_list",
    "ReturnType": "Array",
    "Return": "A list of numbers read (list of ints, length=number+1)",
    "Deprecated": "",
    "Comment": "Reads a number of bytes from the socket. A maximum of 30 values can be read in one command.\r\n\r\nReturns (for example) [3,100,200,44], if there is a timeout or the reply is invalid, [0,-1,-1,-1] is returned, indicating that 0 bytes have been read",
    "Parameters": [
      {
        "Label": "number",
        "Type": "Int",
        "Comment": "The number of bytes to read (int)",
        "Default": ""
      },
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      },
      {
        "Label": "timeout",
        "Type": "Float",
        "Comment": "The number of seconds until the read action times out (float). A timeout of 0 or negative number indicates that the function should not return until a read is completed.",
        "Default": "2"
      }
    ]
  },
  {
    "Name": "socket_read_line",
    "ReturnType": "String",
    "Return": "One line string",
    "Deprecated": "The socket_read_stringreplaces this function. Set ﬂag \"interpret_escape\" to \"True\" to enable the use of escape sequences \"\\n\" \"\\r\" and \"\\t\" as a prefix or suffix.",
    "Comment": "Reads the socket buffer until the first \"\\r\\n\" (carriage return and newline) characters or just the \"\\n\" (newline) character, and returns the data as a string. The returned string will not contain the \"\\n\" nor the \"\\r\\n\" characters.\r\n\r\nReturns (for example) \"reply from the server:\", if there is a timeout or the reply is invalid, an empty line is returned (\"\"). You can test if the line is empty with an if-statement.",
    "Parameters": [
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      },
      {
        "Label": "timeout",
        "Type": "Float",
        "Comment": "The number of seconds until the read action times out (float). A timeout of 0 or negative number indicates that the function should not return until a read is completed.",
        "Default": "2"
      }
    ]
  },
  {
    "Name": "socket_read_string",
    "ReturnType": "String",
    "Return": "String",
    "Deprecated": "",
    "Comment": "Reads all data from the socket and returns the data as a string.\r\n\r\nReturns (for example) \"reply from the server:\\n Hello World\". if there is a timeout or the reply is invalid, an empty string is returned (\"\"). You can test if the string is empty with an if-statement.\r\n\r\n```\r\nif (string_from_server):\r\n  popup(\"the string is not empty\")\r\nend\r\n```\r\n\r\nThe optional parameters \"prefix\" and \"suffix\", can be used to express what is extracted from the socket. The \"prefix\" specifies the start of the substring (message) extracted from the socket. The data up to the end of the \"prefix\" will be ignored and removed from the socket. The \"suffix\" specifies the end of the substring (message) extracted from the socket. Any remaining data on the socket, after the \"suffix\", will be preserved.\r\n\r\nBy using the \"prefix\" and \"suffix\" it is also possible send multiple string to the controller at once, because the suffix defines where the message ends. E.g. sending \">hello<>world<\" and calling this script function with the prefix=\">\" and suffix=\"<\".\r\n\r\nNote that leading spaces in the prefix and suffix strings are ignored in the current software and may cause communication errors in future releases.\r\n\r\nThe optional parameter \"interpret_escape\" can be used to allow the use of escape sequences \"\\n\", \"\\t\" and \"\\r\" as part of the prefix or suffix.",
    "Parameters": [
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      },
      {
        "Label": "prefix",
        "Type": "String",
        "Comment": "Defines a prefix (string)",
        "Default": "''"
      },
      {
        "Label": "suffix",
        "Type": "String",
        "Comment": "Defines a suffix (string)",
        "Default": "''"
      },
      {
        "Label": "interpret_escape",
        "Type": "Bool",
        "Comment": "Enables the interpretation of escape sequences (bool)",
        "Default": "False"
      },
      {
        "Label": "timeout",
        "Type": "Float",
        "Comment": "The number of seconds until the read action times out (float). A timeout of 0 or negative number indicates that the function should not return until a read is completed.",
        "Default": "2"
      }
    ]
  },
  {
    "Name": "socket_send_byte",
    "ReturnType": "Bool",
    "Return": "a boolean value indicating whether the send operation was successful",
    "Deprecated": "",
    "Comment": "Sends a byte to the server\r\n\r\nSends the byte <value> through the socket. Expects no response. Can be used to send special ASCII characters: 10 is newline, 2 is start of text, 3 is end of text.",
    "Parameters": [
      {
        "Label": "value",
        "Type": "Int",
        "Comment": "The number to send (byte)",
        "Default": ""
      },
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      }
    ]
  },
  {
    "Name": "socket_send_int",
    "ReturnType": "Bool",
    "Return": "a boolean value indicating whether the send operation was successful",
    "Deprecated": "",
    "Comment": "Sends an int (int32_t) to the server\r\n\r\nSends the int <value> through the socket. Send in network byte order. Expects no response.",
    "Parameters": [
      {
        "Label": "value",
        "Type": "Int",
        "Comment": "The number to send (int)",
        "Default": ""
      },
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      }
    ]
  },
  {
    "Name": "socket_send_line",
    "ReturnType": "Bool",
    "Return": "a boolean value indicating whether the send operation was successful",
    "Deprecated": "",
    "Comment": "Sends a string with a newline character to the server - useful for communicating with the UR dashboard server\r\n\r\nSends the string <str> through the socket in ASCII coding. Expects no response.",
    "Parameters": [
      {
        "Label": "str",
        "Type": "String",
        "Comment": "The string to send (ascii)",
        "Default": ""
      },
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      }
    ]
  },
  {
    "Name": "socket_send_string",
    "ReturnType": "Bool",
    "Return": "a boolean value indicating whether the send operation was successful",
    "Deprecated": "",
    "Comment": "Sends a string to the server\r\n\r\nSends the string <str> through the socket in ASCII coding. Expects no response.",
    "Parameters": [
      {
        "Label": "str",
        "Type": "String",
        "Comment": "The string to send (ascii)",
        "Default": ""
      },
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      }
    ]
  },
  {
    "Name": "socket_set_var",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sends an integer to the server\r\n\r\nSends the message \"SET <name> <value>\\n\" through the socket. Expects no response.",
    "Parameters": [
      {
        "Label": "name",
        "Type": "String",
        "Comment": "Variable name (string)",
        "Default": ""
      },
      {
        "Label": "value",
        "Type": "Int",
        "Comment": "The number to send (int)",
        "Default": ""
      },
      {
        "Label": "socket_name",
        "Type": "String",
        "Comment": "Name of socket (string)",
        "Default": "\"socket_0\""
      }
    ]
  },
  {
    "Name": "write_output_boolean_register",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Writes the boolean value into one of the output registers, which can also be accessed by a Field bus. Note, uses it’s own memory space.",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the register (0:127)",
        "Default": ""
      },
      {
        "Label": "value",
        "Type": "Bool",
        "Comment": "Value to set in the register (`True`, `False`)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "write_output_float_register",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Writes the float value into one of the output registers, which can also be accessed by a Field bus. Note, uses it’s own memory space.",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the register (0:47)",
        "Default": ""
      },
      {
        "Label": "value",
        "Type": "Float",
        "Comment": "Value to set in the register (float)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "write_output_integer_register",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Writes the integer value into one of the output registers, which can also be accessed by a Field bus. Note, uses it’s own memory space.",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the register (0:47)",
        "Default": ""
      },
      {
        "Label": "value",
        "Type": "Int",
        "Comment": "Value to set in the register [-2,147,483,648 : 2,147,483,647]",
        "Default": ""
      }
    ]
  },
  {
    "Name": "write_port_bit",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Writes one of the ports, which can also be accessed by Modbus clients",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the port (See portmap on Support site, page \"UsingModbusServer\" )",
        "Default": ""
      },
      {
        "Label": "value",
        "Type": "Bool",
        "Comment": "Value to be set in the register (`True`, `False`)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "write_port_register",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Writes one of the ports, which can also be accessed by Modbus clients",
    "Parameters": [
      {
        "Label": "address",
        "Type": "Int",
        "Comment": "Address of the port (See portmap on Support site, page \"UsingModbusServer\" )",
        "Default": ""
      },
      {
        "Label": "value",
        "Type": "Int",
        "Comment": "Value to be set in the port (0 : 65536) or (-32768 : 32767)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "modbus_set_runstate_dependent_choice",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the output signal levels depending on the state of the program (running or stopped).",
    "Parameters": [
      {
        "Label": "signal_name",
        "Type": "String",
        "Comment": "A string identifying an output digital signal that in advance has been added.",
        "Default": ""
      },
      {
        "Label": "runstate_choice",
        "Type": "Int",
        "Comment": "An integer:\r\n\r\n* `0` preserve program state\r\n* `1` set low when a program is not running\r\n* `2` set high when a program is not running\r\n* `3` High when program is running and low when it is stopped",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_analog_outputdomain",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set domain of analog outputs",
    "Parameters": [
      {
        "Label": "port",
        "Type": "Int",
        "Comment": "analog output port number",
        "Default": ""
      },
      {
        "Label": "domain",
        "Type": "Int",
        "Comment": "analog output domain: 0: 4-20mA, 1: 0-10V",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_configurable_digital_input_action",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Using this method sets the selected configurable digital input register to either a \"default\" or \"freedrive\" action.\r\n\r\nSee also:\r\n* `set_input_actions_to_default`\r\n* `set_standard_digital_input_action`\r\n* `set_tool_digital_input_action`\r\n* `set_gp_boolean_input_action`",
    "Parameters": [
      {
        "Label": "port",
        "Type": "Int",
        "Comment": "The configurable digital input port number. (integer)",
        "Default": ""
      },
      {
        "Label": "action",
        "Type": "String",
        "Comment": "The type of action. The action can either be \"default\" or \"freedrive\". (string)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_gp_boolean_input_action",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Using this method sets the selected gp boolean input register to either a \"default\" or \"freedrive\" action.",
    "Parameters": [
      {
        "Label": "port",
        "Type": "Int",
        "Comment": "The gp boolean input port number. integer: [0:127]",
        "Default": ""
      },
      {
        "Label": "action",
        "Type": "String",
        "Comment": "The type of action. The action can either be \"default\" or \"freedrive\". (string)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_input_actions_to_default",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Using this method sets the input actions of all standard, configurable, tool, and gp_boolean input registers to \"default\" action.\r\n\r\nSee also:\r\n\r\n* `set_standard_digital_input_action`\r\n* `set_configurable_digital_input_action`\r\n* `set_tool_digital_input_action`\r\n* `set_gp_boolean_input_action`",
    "Parameters": []
  },
  {
    "Name": "set_runstate_configurable_digital_output_to_value",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the output signal levels depending on the state of the program (running or stopped).\r\n\r\nExample: Set configurable digital output 5 to high when program is not running.\r\n\r\n```\r\nset_runstate_configurable_digital_output_to_value(5, 2)\r\n```",
    "Parameters": [
      {
        "Label": "outputId",
        "Type": "Int",
        "Comment": "The output signal number (id), integer: [0:7]",
        "Default": ""
      },
      {
        "Label": "state",
        "Type": "Int",
        "Comment": "The state of the output, integer:\r\n\r\n* `0` Preserve state\r\n* `1` Low when program is not running\r\n* `2` High when program is not running\r\n* `3` High when program is running and low when it is stopped",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_runstate_gp_boolean_output_to_value",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the output value depending on the state of the program (running or stopped).",
    "Parameters": [
      {
        "Label": "outputId",
        "Type": "Int",
        "Comment": "The output signal number (id), integer: [0:127]",
        "Default": ""
      },
      {
        "Label": "state",
        "Type": "Int",
        "Comment": "The state of the output, integer:\r\n\r\n* `0` Preserve state\r\n* `1` Low when program is not running\r\n* `2` High when program is not running\r\n* `3` High when program is running and low when it is stopped",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_runstate_standard_analog_output_to_value",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the output signal levels depending on the state of the program (running or stopped).\r\n\r\nExample: Set standard analog output 1 to high when program is not running.\r\n\r\n```\r\nset_runstate_standard_analog_output_to_value(1, 2)\r\n```",
    "Parameters": [
      {
        "Label": "outputId",
        "Type": "Int",
        "Comment": "The output signal number (id), integer: [0:1]",
        "Default": ""
      },
      {
        "Label": "state",
        "Type": "Int",
        "Comment": "The state of the output, integer:\r\n\r\n* `0` Preserve state\r\n* `1` Min when program is not running\r\n* `2` Max when program is not running\r\n* `3` Max when program is running and Min when it is stopped",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_runstate_standard_digital_output_to_value",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the output signal level depending on the state of the program (running or stopped).\r\n\r\nExample: Set standard digital output 5 to high when program is not running.\r\n\r\n```\r\nset_runstate_standard_digital_output_to_value(5, 2)\r\n```",
    "Parameters": [
      {
        "Label": "outputId",
        "Type": "Int",
        "Comment": "The output signal number (id), integer: [0:7]",
        "Default": ""
      },
      {
        "Label": "state",
        "Type": "Int",
        "Comment": "The state of the output, integer:\r\n\r\n* `0` Preserve state\r\n* `1` Low when program is not running\r\n* `2` High when program is not running\r\n* `3` High when program is running and low when it is stopped",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_runstate_tool_digital_output_to_value",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Sets the output signal level depending on the state of the program (running or stopped).\r\n\r\nExample: Set tool digital output 1 to high when program is not running.\r\n\r\n```\r\nset_runstate_tool_digital_output_to_value(1, 2)\r\n```",
    "Parameters": [
      {
        "Label": "outputId",
        "Type": "Int",
        "Comment": "The output signal number (id), integer: [0:1]",
        "Default": ""
      },
      {
        "Label": "state",
        "Type": "Int",
        "Comment": "The state of the output, integer:\r\n\r\n* `0` Preserve state\r\n* `1` Low when program is not running\r\n* `2` High when program is not running\r\n* `3` High when program is running and low when it is stopped",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_standard_analog_input_domain",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set domain of standard analog inputs in the controller box\r\n\r\nFor the tool inputs see `set_tool_analog_input_domain`.",
    "Parameters": [
      {
        "Label": "port",
        "Type": "Int",
        "Comment": "analog input port number: 0 or 1",
        "Default": ""
      },
      {
        "Label": "domain",
        "Type": "Int",
        "Comment": "analog input domains: 0: 4-20mA, 1: 0-10V",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_standard_digital_input_action",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Using this method sets the selected standard digital input register to either a \"default\" or \"freedrive\" action.\r\n\r\nSee also:\r\n\r\n* `set_input_actions_to_default`\r\n* `set_configurable_digital_input_action`\r\n* `set_tool_digital_input_action`\r\n* `set_gp_boolean_input_action`",
    "Parameters": [
      {
        "Label": "port",
        "Type": "Int",
        "Comment": "The standard digital input port number. (integer)",
        "Default": ""
      },
      {
        "Label": "action",
        "Type": "String",
        "Comment": "The type of action. The action can either be \"default\" or \"freedrive\". (string)",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_tool_analog_input_domain",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Set domain of analog inputs in the tool\r\n\r\nFor the controller box inputs see `set_standard_analog_input_domain`.",
    "Parameters": [
      {
        "Label": "port",
        "Type": "Int",
        "Comment": "analog input port number: 0 or 1",
        "Default": ""
      },
      {
        "Label": "domain",
        "Type": "Int",
        "Comment": "analog input domains: 0: 4-20mA, 1: 0-10V",
        "Default": ""
      }
    ]
  },
  {
    "Name": "set_tool_digital_input_action",
    "ReturnType": "None",
    "Return": "",
    "Deprecated": "",
    "Comment": "Using this method sets the selected tool digital input register to either a \"default\" or \"freedrive\" action.\r\n\r\nSee also:\r\n\r\n* `set_input_actions_to_default`\r\n* `set_standard_digital_input_action`\r\n* `set_configurable_digital_input_action`\r\n* `set_gp_boolean_input_action`",
    "Parameters": [
      {
        "Label": "port",
        "Type": "Int",
        "Comment": "The tool digital input port number. (integer)",
        "Default": ""
      },
      {
        "Label": "action",
        "Type": "String",
        "Comment": "The type of action. The action can either be \"default\" or \"freedrive\". (string)",
        "Default": ""
      }
    ]
  }
]